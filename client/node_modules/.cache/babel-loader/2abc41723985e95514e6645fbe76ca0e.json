{"ast":null,"code":"import _slicedToArray from\"/Users/joshuacoronel/Developer/James Beeks/memebate-test/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import styles from\"./Meme.module.css\";import{useHistory}from\"react-router-dom\";function Meme(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),meme=_useState2[0],setMeme=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),memeIndex=_useState4[0],setMemeIndex=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),captions=_useState6[0],setCaptions=_useState6[1];var api=\"384be08c76d654f4105db56ec7dd11\";var history=useHistory();var updateCaption=function updateCaption(e,index){var text=e.target.value||\"\";setCaptions(captions.map(function(c,i){if(index===i){return text;}else{return c;}}));};var generateMeme=function generateMeme(){var currentMeme=meme[memeIndex];var formData=new FormData();formData.append(\"template_id\",currentMeme.id);captions.forEach(function(c,index){return formData.append(\"boxes[\".concat(index,\"][text]\"),c);});};var shuffleMeme=function shuffleMeme(array){for(var i=array.length-1;i>0;i--){var j=Math.floor(Math.random()*i);var temp=array[i];array[i]=array[j];array[j]=temp;}};useEffect(function(){fetch(\"http://memebuild.com/api/1.0/getDefaultMemes?api-key=\"+api).then(function(res){res.json();}).then(function(res){var _meme=res;console.log(res);shuffleMeme(_meme);setMeme(_meme);}).catch(function(error){console.log(error);});},[]);useEffect(function(){if(meme.length){setCaptions(Array(meme[memeIndex].box_count).fill(\"\"));}},[memeIndex,meme]);return meme.length>0?/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsx(\"button\",{onClick:generateMeme,className:styles.generate,children:\"Generate\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return setMemeIndex(memeIndex+1);},className:styles.skip,children:\"Skip\"}),captions.map(function(c,index){return/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){return updateCaption(e,index);}},index);}),/*#__PURE__*/_jsx(\"img\",{alt:\"meme\",src:meme[memeIndex].url})]}):/*#__PURE__*/_jsx(_Fragment,{});}export default Meme;","map":{"version":3,"sources":["/Users/joshuacoronel/Developer/James Beeks/memebate-test/client/src/components/Meme.js"],"names":["React","useEffect","useState","styles","useHistory","Meme","meme","setMeme","memeIndex","setMemeIndex","captions","setCaptions","api","history","updateCaption","e","index","text","target","value","map","c","i","generateMeme","currentMeme","formData","FormData","append","id","forEach","shuffleMeme","array","length","j","Math","floor","random","temp","fetch","then","res","json","_meme","console","log","catch","error","Array","box_count","fill","container","generate","skip","url"],"mappings":"mUAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEE,QAASC,CAAAA,IAAT,EAAgB,eACQH,QAAQ,CAAC,EAAD,CADhB,wCACTI,IADS,eACHC,OADG,8BAEkBL,QAAQ,CAAC,CAAD,CAF1B,yCAETM,SAFS,eAEEC,YAFF,8BAGgBP,QAAQ,CAAC,EAAD,CAHxB,yCAGTQ,QAHS,eAGCC,WAHD,eAIhB,GAAMC,CAAAA,GAAG,CAAG,gCAAZ,CAEA,GAAMC,CAAAA,OAAO,CAAGT,UAAU,EAA1B,CAEA,GAAMU,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,CAAD,CAAIC,KAAJ,CAAc,CAClC,GAAMC,CAAAA,IAAI,CAAGF,CAAC,CAACG,MAAF,CAASC,KAAT,EAAkB,EAA/B,CACAR,WAAW,CACTD,QAAQ,CAACU,GAAT,CAAa,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACrB,GAAIN,KAAK,GAAKM,CAAd,CAAiB,CACf,MAAOL,CAAAA,IAAP,CACD,CAFD,IAEO,CACL,MAAOI,CAAAA,CAAP,CACD,CACF,CAND,CADS,CAAX,CASD,CAXD,CAaA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAMC,CAAAA,WAAW,CAAGlB,IAAI,CAACE,SAAD,CAAxB,CACA,GAAMiB,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,QAAJ,EAAjB,CACAD,QAAQ,CAACE,MAAT,CAAgB,aAAhB,CAA+BH,WAAW,CAACI,EAA3C,EACAlB,QAAQ,CAACmB,OAAT,CAAiB,SAACR,CAAD,CAAIL,KAAJ,QAAcS,CAAAA,QAAQ,CAACE,MAAT,iBAAyBX,KAAzB,YAAyCK,CAAzC,CAAd,EAAjB,EACD,CALD,CAMA,GAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,IAAK,GAAIT,CAAAA,CAAC,CAAGS,KAAK,CAACC,MAAN,CAAe,CAA5B,CAA+BV,CAAC,CAAG,CAAnC,CAAsCA,CAAC,EAAvC,CAA2C,CACzC,GAAMW,CAAAA,CAAC,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBd,CAA3B,CAAV,CACA,GAAMe,CAAAA,IAAI,CAAGN,KAAK,CAACT,CAAD,CAAlB,CACAS,KAAK,CAACT,CAAD,CAAL,CAAWS,KAAK,CAACE,CAAD,CAAhB,CACAF,KAAK,CAACE,CAAD,CAAL,CAAWI,IAAX,CACD,CACF,CAPD,CASApC,SAAS,CAAC,UAAM,CACdqC,KAAK,CAAC,wDAAwD1B,GAAzD,CAAL,CACG2B,IADH,CACQ,SAACC,GAAD,CAAS,CACbA,GAAG,CAACC,IAAJ,GACD,CAHH,EAIGF,IAJH,CAIQ,SAACC,GAAD,CAAS,CACb,GAAME,CAAAA,KAAK,CAAGF,GAAd,CACAG,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EACAV,WAAW,CAACY,KAAD,CAAX,CACAnC,OAAO,CAACmC,KAAD,CAAP,CACD,CATH,EASKG,KATL,CASW,SAAAC,KAAK,CAAE,CACdH,OAAO,CAACC,GAAR,CAAYE,KAAZ,EACD,CAXH,EAYD,CAbQ,CAaN,EAbM,CAAT,CAeA7C,SAAS,CAAC,UAAM,CACd,GAAIK,IAAI,CAAC0B,MAAT,CAAiB,CACfrB,WAAW,CAACoC,KAAK,CAACzC,IAAI,CAACE,SAAD,CAAJ,CAAgBwC,SAAjB,CAAL,CAAiCC,IAAjC,CAAsC,EAAtC,CAAD,CAAX,CACD,CACF,CAJQ,CAIN,CAACzC,SAAD,CAAYF,IAAZ,CAJM,CAAT,CAKA,MAAOA,CAAAA,IAAI,CAAC0B,MAAL,CAAc,CAAd,cACL,aAAK,SAAS,CAAE7B,MAAM,CAAC+C,SAAvB,wBACE,eAAQ,OAAO,CAAE3B,YAAjB,CAA+B,SAAS,CAAEpB,MAAM,CAACgD,QAAjD,sBADF,cAIE,eACE,OAAO,CAAE,yBAAM1C,CAAAA,YAAY,CAACD,SAAS,CAAG,CAAb,CAAlB,EADX,CAEE,SAAS,CAAEL,MAAM,CAACiD,IAFpB,kBAJF,CAUG1C,QAAQ,CAACU,GAAT,CAAa,SAACC,CAAD,CAAIL,KAAJ,qBACZ,cAAO,QAAQ,CAAE,kBAACD,CAAD,QAAOD,CAAAA,aAAa,CAACC,CAAD,CAAIC,KAAJ,CAApB,EAAjB,EAAsDA,KAAtD,CADY,EAAb,CAVH,cAaE,YAAK,GAAG,CAAC,MAAT,CAAgB,GAAG,CAAEV,IAAI,CAACE,SAAD,CAAJ,CAAgB6C,GAArC,EAbF,GADK,cAiBL,kBAjBF,CAmBD,CAED,cAAehD,CAAAA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"./Meme.module.css\";\nimport { useHistory } from \"react-router-dom\";\n\n  function Meme() {\n  const [meme, setMeme] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  const api = \"384be08c76d654f4105db56ec7dd11\";\n\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(\n      captions.map((c, i) => {\n        if (index === i) {\n          return text;\n        } else {\n          return c;\n        }\n      })\n    );\n  };\n\n  const generateMeme = () => {\n    const currentMeme = meme[memeIndex];\n    const formData = new FormData();\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n  }\n  const shuffleMeme = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"http://memebuild.com/api/1.0/getDefaultMemes?api-key=\"+api)\n      .then((res) => {\n        res.json();\n      })\n      .then((res) => {\n        const _meme = res;\n        console.log(res)\n        shuffleMeme(_meme);\n        setMeme(_meme);\n      }).catch(error=>{\n        console.log(error)\n      })\n  }, []);\n\n  useEffect(() => {\n    if (meme.length) {\n      setCaptions(Array(meme[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, meme]);\n  return meme.length > 0? (\n    <div className={styles.container}>\n      <button onClick={generateMeme} className={styles.generate}>\n        Generate\n      </button>\n      <button\n        onClick={() => setMemeIndex(memeIndex + 1)}\n        className={styles.skip}\n      >\n        Skip\n      </button>\n      {captions.map((c, index) => (\n        <input onChange={(e) => updateCaption(e, index)} key={index} />\n      ))}\n      <img alt=\"meme\" src={meme[memeIndex].url} />\n    </div>\n  ) : (\n    <></>\n  );\n}\n\nexport default Meme"]},"metadata":{},"sourceType":"module"}