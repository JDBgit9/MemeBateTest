{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/joshuacoronel/Developer/James Beeks/Cleint/memebate-test/client/src/components/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./Meme.module.css\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Meme() {\n  _s();\n\n  const [meme, setMeme] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  const api = \"384be08c76d654f4105db56ec7dd11\";\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  };\n\n  const generateMeme = () => {\n    const currentMeme = meme[memeIndex];\n    const formData = new FormData();\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n  };\n\n  const shuffleMeme = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"http://memebuild.com/api/1.0/getDefaultMemes?api-key=\" + api).then(res => {\n      res.json();\n    }).then(res => {\n      const _meme = res;\n      console.log(res);\n      shuffleMeme(_meme);\n      setMeme(_meme);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  useEffect(() => {\n    if (meme.length) {\n      setCaptions(Array(meme[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, meme]);\n  return meme.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateMeme,\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setMemeIndex(memeIndex + 1),\n      className: styles.skip,\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), captions.map((c, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => updateCaption(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"meme\",\n      src: meme[memeIndex].url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Meme, \"+nDOh9pHFzU1KusVifFpVxPZgjA=\", false, function () {\n  return [useHistory];\n});\n\n_c = Meme;\nexport default Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["/Users/joshuacoronel/Developer/James Beeks/Cleint/memebate-test/client/src/components/Meme.js"],"names":["React","useEffect","useState","styles","useHistory","Meme","meme","setMeme","memeIndex","setMemeIndex","captions","setCaptions","api","history","updateCaption","e","index","text","target","value","map","c","i","generateMeme","currentMeme","formData","FormData","append","id","forEach","shuffleMeme","array","length","j","Math","floor","random","temp","fetch","then","res","json","_meme","console","log","catch","error","Array","box_count","fill","container","generate","skip","url"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEE,SAASC,IAAT,GAAgB;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMU,GAAG,GAAG,gCAAZ;AAEA,QAAMC,OAAO,GAAGT,UAAU,EAA1B;;AAEA,QAAMU,aAAa,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAClC,UAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,KAAT,IAAkB,EAA/B;AACAR,IAAAA,WAAW,CACTD,QAAQ,CAACU,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,UAAIN,KAAK,KAAKM,CAAd,EAAiB;AACf,eAAOL,IAAP;AACD,OAFD,MAEO;AACL,eAAOI,CAAP;AACD;AACF,KAND,CADS,CAAX;AASD,GAXD;;AAaA,QAAME,YAAY,GAAG,MAAM;AACzB,UAAMC,WAAW,GAAGlB,IAAI,CAACE,SAAD,CAAxB;AACA,UAAMiB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BH,WAAW,CAACI,EAA3C;AACAlB,IAAAA,QAAQ,CAACmB,OAAT,CAAiB,CAACR,CAAD,EAAIL,KAAJ,KAAcS,QAAQ,CAACE,MAAT,CAAiB,SAAQX,KAAM,SAA/B,EAAyCK,CAAzC,CAA/B;AACD,GALD;;AAMA,QAAMS,WAAW,GAAIC,KAAD,IAAW;AAC7B,SAAK,IAAIT,CAAC,GAAGS,KAAK,CAACC,MAAN,GAAe,CAA5B,EAA+BV,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,YAAMW,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBd,CAA3B,CAAV;AACA,YAAMe,IAAI,GAAGN,KAAK,CAACT,CAAD,CAAlB;AACAS,MAAAA,KAAK,CAACT,CAAD,CAAL,GAAWS,KAAK,CAACE,CAAD,CAAhB;AACAF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAWI,IAAX;AACD;AACF,GAPD;;AASApC,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,KAAK,CAAC,0DAAwD1B,GAAzD,CAAL,CACG2B,IADH,CACSC,GAAD,IAAS;AACbA,MAAAA,GAAG,CAACC,IAAJ;AACD,KAHH,EAIGF,IAJH,CAISC,GAAD,IAAS;AACb,YAAME,KAAK,GAAGF,GAAd;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAV,MAAAA,WAAW,CAACY,KAAD,CAAX;AACAnC,MAAAA,OAAO,CAACmC,KAAD,CAAP;AACD,KATH,EASKG,KATL,CASWC,KAAK,IAAE;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KAXH;AAYD,GAbQ,EAaN,EAbM,CAAT;AAeA7C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,IAAI,CAAC0B,MAAT,EAAiB;AACfrB,MAAAA,WAAW,CAACoC,KAAK,CAACzC,IAAI,CAACE,SAAD,CAAJ,CAAgBwC,SAAjB,CAAL,CAAiCC,IAAjC,CAAsC,EAAtC,CAAD,CAAX;AACD;AACF,GAJQ,EAIN,CAACzC,SAAD,EAAYF,IAAZ,CAJM,CAAT;AAKA,SAAOA,IAAI,CAAC0B,MAAL,GAAc,CAAd,gBACL;AAAK,IAAA,SAAS,EAAE7B,MAAM,CAAC+C,SAAvB;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE3B,YAAjB;AAA+B,MAAA,SAAS,EAAEpB,MAAM,CAACgD,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,OAAO,EAAE,MAAM1C,YAAY,CAACD,SAAS,GAAG,CAAb,CAD7B;AAEE,MAAA,SAAS,EAAEL,MAAM,CAACiD,IAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAUG1C,QAAQ,CAACU,GAAT,CAAa,CAACC,CAAD,EAAIL,KAAJ,kBACZ;AAAO,MAAA,QAAQ,EAAGD,CAAD,IAAOD,aAAa,CAACC,CAAD,EAAIC,KAAJ;AAArC,OAAsDA,KAAtD;AAAA;AAAA;AAAA;AAAA,YADD,CAVH,eAaE;AAAK,MAAA,GAAG,EAAC,MAAT;AAAgB,MAAA,GAAG,EAAEV,IAAI,CAACE,SAAD,CAAJ,CAAgB6C;AAArC;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADK,gBAiBL,qCAjBF;AAmBD;;GA3EUhD,I;UAMOD,U;;;KANPC,I;AA6EX,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"./Meme.module.css\";\nimport { useHistory } from \"react-router-dom\";\n\n  function Meme() {\n  const [meme, setMeme] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  const api = \"384be08c76d654f4105db56ec7dd11\";\n\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(\n      captions.map((c, i) => {\n        if (index === i) {\n          return text;\n        } else {\n          return c;\n        }\n      })\n    );\n  };\n\n  const generateMeme = () => {\n    const currentMeme = meme[memeIndex];\n    const formData = new FormData();\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n  }\n  const shuffleMeme = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"http://memebuild.com/api/1.0/getDefaultMemes?api-key=\"+api)\n      .then((res) => {\n        res.json();\n      })\n      .then((res) => {\n        const _meme = res;\n        console.log(res)\n        shuffleMeme(_meme);\n        setMeme(_meme);\n      }).catch(error=>{\n        console.log(error)\n      })\n  }, []);\n\n  useEffect(() => {\n    if (meme.length) {\n      setCaptions(Array(meme[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, meme]);\n  return meme.length > 0? (\n    <div className={styles.container}>\n      <button onClick={generateMeme} className={styles.generate}>\n        Generate\n      </button>\n      <button\n        onClick={() => setMemeIndex(memeIndex + 1)}\n        className={styles.skip}\n      >\n        Skip\n      </button>\n      {captions.map((c, index) => (\n        <input onChange={(e) => updateCaption(e, index)} key={index} />\n      ))}\n      <img alt=\"meme\" src={meme[memeIndex].url} />\n    </div>\n  ) : (\n    <></>\n  );\n}\n\nexport default Meme"]},"metadata":{},"sourceType":"module"}